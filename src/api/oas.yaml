openapi: 3.0.0
info:
  title: Example API
  version: 1.0.0
  description: API documentation for Example microservice
servers:
  - url: /api/v1
paths:
  /examples:
    get:
      summary: Get all examples
      tags:
        - Example
      responses:
        '200':
          description: A list of examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    post:
      summary: Create a new example
      tags:
        - Example
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExample'
      responses:
        '201':
          description: The created example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Example created successfully
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /examples/{id}:
    get:
      summary: Get a specific example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to get
          schema:
            type: string
      responses:
        '200':
          description: The requested example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        '200':
          description: The updated example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Example updated successfully
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to delete
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interestFilter:
    post:
      summary: Create a new interestFilter
      tags:
        - InterestFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInterestFilter'
      responses:
        '201':
          description: The created interestFilter
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: InterestFilter created successfully
                  data:
                    $ref: '#/components/schemas/InterestFilter'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /interestFilter/{userId}: 
    get:
      summary: Get a specific interestFilter by userId
      tags:
        - InterestFilter
      parameters:
        - in: path
          name: userId
          required: true
          description: userId of the interestFilter to get
          schema:
            type: string
      responses:
        '200':
          description: The requested interestFilter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestFilter'
        '404':
          description: InterestFilter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interestFilter/{id}:
    put:
      summary: Update an existing interestFilter by ID
      tags:
        - InterestFilter
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the interestFilter to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInterestFilter'
      responses:
        '200':
          description: The updated interestFilter
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: InterestFilter updated successfully
                  data:
                    $ref: '#/components/schemas/UpdateInterestFilter'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: InterestFilter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Example:
      type: object
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8f0d8d0b6f9e'
        name:
          type: string
          example: Example Name
        value:
          type: number
          example: 123
      required:
        - name
        - value
    NewExample:
      type: object
      properties:
        name:
          type: string
          example: Example Name
        value:
          type: number
          example: 123
      required:
        - name
        - value
    InterestFilter:
      type: object
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8f0d8d0b6f9e'
        userId:
          type: string
          example: '12345abcde'
        categoryList:
          type: array
          items:
            type: string
            enum:
              - NATURE
              - CITY
              - CULTURE
              - ADVENTURE
              - RELAX
          example:
            - NATURE
            - CULTURE
      required:
        - userId
        - categoryList
    NewInterestFilter:
      type: object
      properties:
        userId:
          type: string
          example: '12345abcde'
        categoryList:
          type: array
          items:
            type: string
            enum:
              - NATURE
              - CITY
              - CULTURE
              - ADVENTURE
              - RELAX
          example:
            - CITY
            - ADVENTURE
      required:
        - userId
        - categoryList
    UpdateInterestFilter:
      type: object
      properties:
        categoryList:
          type: array
          items:
            type: string
            enum:
              - NATURE
              - CITY
              - CULTURE
              - ADVENTURE
              - RELAX
          example:
            - CITY
            - ADVENTURE
      required:
        - categoryList
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: InterestFilter not found
        appCode:
          type: string
          example: UNKNOWN_ERROR
        timestamp:
          type: string
          example: '2023-10-01T12:00:00.000Z'
